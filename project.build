<?xml version="1.0"?>
<project name="Template" default="all">
    <property name="debug" value="true" />
	
	<property name="base.dir" value="${project::get-base-directory()}" />
	<property name="build.dir" value="${base.dir}\build" />
	<property name="deploy.dir" value="${base.dir}\deploy" />
	<property name="tools.dir" value="${base.dir}\tools" />
	<property name="lib.dir" value="${base.dir}\lib" />
	<property name="src.dir" value="${base.dir}\src" />
	<property name="res.dir" value="${base.dir}\res" />
	<property name="app.src.dir" value="${src.dir}\app" />
	<property name="test.src.dir" value="${src.dir}\test" />

	<property name="app.lib" value="${project::get-name()}.dll" />
	<property name="test.lib" value="${project::get-name()}.test.dll" />
	<property name="xunit.console.args" value="${test.lib} /sr /report-type:Text /rf:${build.dir} /rnf:Report" />

	<fileset id="app.references">
		<include name="${lib.dir}\**\*.dll" />
	</fileset>

	<fileset id="app.resources">
		<include name="${res.dir}\**\*" />
	</fileset>

	<fileset id="lib.references">
		<include name="${lib.dir}\**\*.dll" />
	</fileset>	
	
	<fileset id="tools.references">
		<include name="${tools.dir}\mbunit\bin\**.dll" />
		<include name="${tools.dir}\rhino.mocks\Rhino.Mocks.dll" />
	</fileset>
	
	<fileset id="test.references">
		<include name="${tools.dir}\mbunit\bin\MbUnit.Framework.dll" />
		<include name="${tools.dir}\rhino.mocks\Rhino.Mocks.dll" />		
		<include name="${build.dir}\${app.lib}" />
		<include name="${lib.dir}\**\*.dll" />
	</fileset>

	<fileset id="app.source.files">
		<exclude name="${app.src.dir}\**\AssemblyInfo.cs" />
		<include name="${app.src.dir}\**\*.cs" />
	</fileset>
	
    <target name="all" depends="deploy" description="Deploys the assembly" />
	
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${deploy.dir}" />
	</target>

	<target name="init" depends="clean">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${deploy.dir}" />
	</target>
	
	<target name="compile" depends="init">
		<csc output="${compile.dir}\${app.lib}" target="library" debug="${debug}">
			<sources refid="app.source.files" />
			<references refid="app.references" />
		</csc>
	</target>

	<target name="test.compile">		
		<property name="compile.dir" value="${build.dir}" />
		<call target="compile" />
		<csc output="${compile.dir}\${test.lib}" target="library" debug="${debug}">
			<sources>
				<include name="${test.src.dir}\**\*.cs" />
				<exclude name="${test.src.dir}\**\AssemblyInfo.cs" />
			</sources>
			<references refid="test.references" />
		</csc>
	</target>

	<target name="test.copy.dependencies">	
		<copy todir="${build.dir}" flatten="true">
			<fileset refid="tools.references" />
		</copy>

		<copy todir="${build.dir}" flatten="true">
			<fileset refid="lib.references" />
		</copy>		
	</target>
	
	<target name="test" depends="test.compile, test.copy.dependencies">	
		<exec basedir="${tools.dir}\mbunit\bin" 
			useruntimeengine="true" 
			workingdir="${build.dir}"
			failonerror="false"
			program="mbunit.Cons.exe" 
			commandline="${xunit.console.args}" />						
	</target>

	<target name="deploy.resources">
		<copy todir="${deploy.dir}" flatten="false">
			<fileset refid="app.resources" />
		</copy>

		<copy todir="${deploy.dir}" flatten="true">
			<fileset refid="lib.references" />
		</copy>
	</target>
	
	<target name="deploy" depends="init, deploy.resources">
		<csc output="${deploy.dir}\${project::get-name()}.exe" target="winexe" debug="false">
			<sources>
				<include name="${app.src.dir}\**\*.cs" />
				<exclude name="${app.src.dir}\**\AssemblyInfo.cs" />
			</sources>
			<resources dynamicprefix="true">
				<include name="${app.src.dir}\**\*.resx" />
			</resources>
			<resources>
				<include name="${app.src.dir}\**\*.rpt" />
			</resources>
			<references refid="lib.references" />
		</csc>
	</target>
	
	<target name="run" depends="deploy">
		<exec basedir="${deploy.dir}" workingdir="${deploy.dir}" program="${project::get-name()}.exe" />
	</target>
	
</project>